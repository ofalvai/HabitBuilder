plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.spotify.ruler'
}

apply plugin: 'com.google.devtools.ksp'
apply plugin: 'app.cash.licensee'
apply plugin: 'jacoco'
apply plugin: 'com.bugsnag.android.gradle'

ext {
    PACKAGE_NAME = "com.ofalvai.habittracker"
    VERSION_CODE = 1
    VERSION_NAME = "0.1.0"
    API_KEY_BUGSNAG = "2e13a542ae3ed09ad42a5c82444925af"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdk 21
        targetSdk 31
        versionCode VERSION_CODE
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [api_key_bugsnag: "${API_KEY_BUGSNAG}"]
    }

    lint {
        enable 'DuplicateStrings', 'NewerVersionAvailable'
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
//            testCoverageEnabled true TODO: investigate why device tests are stuck when this is enabled
        }

        release {
            signingConfig = debug.signingConfig
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        useIR = true
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    }
    buildFeatures {
        buildConfig true
        compose true
    }

    composeOptions {
         kotlinCompilerExtensionVersion libs.versions.compose.get()
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/licenses/**']
        }
        resources {
            excludes += ['META-INF/licenses/**', 'META-INF/AL2.0', 'META-INF/LGPL2.1', '**/attach_hotspot_windows.dll']
        }
    }


    testOptions {
        animationsDisabled = true

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

afterEvaluate {
    tasks.withType(Test) {
        jacoco.excludes = ['jdk.internal.*']
    }
}

ruler {
    abi.set("arm64-v8a")
    locale.set("en")
    screenDensity.set(480)
    sdkVersion.set(27)
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*Module.*',
            '**/*Dagger*.*',
            '**/*_MembersInjector.class',
            '**/Dagger*Component*.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/*Dao_Impl.*'
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/app_classes/debug").matching {
        exclude fileFilter
    }

    sourceDirectories.setFrom(files([
            android.sourceSets.main.java.srcDirs,
            "$project.projectDir/src/main/java"
    ]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/*.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ]))
}

licensee {
    allow("Apache-2.0")
    allow("MIT")
    allowDependency("com.github.kizitonwose", "CalendarView", "1.0.4") {
        because "Artifact declares no licenses, but it's MIT according to GitHub"
    }
}

dependencies {
    implementation project(':core-database')
    implementation project(':core-ui')
    implementation project(':core-model')
    coreLibraryDesugaring libs.android.tools.desugar

    implementation libs.bundles.compose
    implementation libs.compose.ui.toolingpreview
    debugImplementation libs.compose.ui.tooling

    implementation libs.androidx.navigation.compose
    implementation libs.androidx.activity.compose

    implementation libs.androidx.room.runtime

    implementation libs.logcat
    implementation libs.calendarview
    implementation(libs.reorderable)
    implementation libs.accompanist.insets
    implementation libs.accompanist.systemuicontroller
    implementation libs.accompanist.navigation

    implementation libs.bugsnag.runtime

    // Required by layout inspector
    debugRuntimeOnly libs.kotlin.reflect

    implementation libs.showkase.annotation
    debugImplementation libs.showkase.full
    kspDebug libs.showkase.processor

    testImplementation project(':core-testing')
    testImplementation libs.junit
    testImplementation libs.kotlin.coroutines.test
    testImplementation libs.mockito.kotlin
    testImplementation libs.turbine

    androidTestImplementation project(':core-testing')
    androidTestImplementation libs.kotlin.coroutines.test
    androidTestImplementation libs.androidx.junit.ext
    androidTestImplementation libs.androidx.espresso
    androidTestImplementation libs.androidx.core.testing
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.turbine
    androidTestImplementation libs.compose.ui.test
    debugImplementation libs.compose.ui.test.manifest
}