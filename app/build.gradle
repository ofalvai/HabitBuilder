plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

apply plugin: 'kotlin-kapt'
apply plugin: 'app.cash.licensee'
apply plugin: 'jacoco'
apply plugin: 'com.bugsnag.android.gradle'

ext {
    PACKAGE_NAME = "com.ofalvai.habittracker"
    VERSION_CODE = 1
    VERSION_NAME = "0.1.0"
    API_KEY_BUGSNAG = "2e13a542ae3ed09ad42a5c82444925af"
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion 22 // Trace minSdk is 22
        targetSdkVersion 30
        versionCode VERSION_CODE
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.incremental": "true",
                        "room.schemaLocation": "$projectDir/schemas".toString()
                ]
            }
        }

        manifestPlaceholders = [api_key_bugsnag: "${API_KEY_BUGSNAG}"]
    }

    lintOptions {
        enable "DuplicateStrings", "NewerVersionAvailable"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled true
        }

        release {
            signingConfig = debug.signingConfig
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    }
    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    packagingOptions {
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
        exclude "**/attach_hotspot_windows.dll"
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

afterEvaluate {
    tasks.withType(Test) {
        jacoco.excludes = ['jdk.internal.*']
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*Module.*',
            '**/*Dagger*.*',
            '**/*_MembersInjector.class',
            '**/Dagger*Component*.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/*Dao_Impl.*'
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/app_classes/debug").matching {
        exclude fileFilter
    }

    sourceDirectories.setFrom(files([
            android.sourceSets.main.java.srcDirs,
            "$project.projectDir/src/main/java"
    ]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/debugUnitTest/*.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ]))
}

licensee {
    allow("Apache-2.0")
    allow("MIT")
    allowDependency('org.jetbrains', 'annotations', '16.0.1') {
        because 'Apache-2.0, but typo in license URL fixed in newer versions'
    }
    allowDependency("com.github.kizitonwose", "CalendarView", "1.0.4") {
        because "Artifact declares no licenses, but it's MIT according to GitHub"
    }
}

// https://www.zacsweers.dev/kapts-hidden-test-costs/
tasks
    .matching {
        it.name.startsWith("kapt") && it.name.endsWith("TestKotlin")
    }
    .configureEach { it.enabled = false }

dependencies {
    coreLibraryDesugaring libs.android.tools.desugar

    implementation libs.bundles.compose
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.activity.compose

    implementation libs.androidx.lifecycle.runtime

    implementation libs.androidx.room.ktx
    kapt libs.androidx.room.compiler

    implementation libs.timber
    implementation libs.calendarview
    implementation libs.accompanist.insets
    implementation libs.accompanist.systemuicontroller

    implementation libs.bugsnag.runtime

    // Required by layout inspector
    debugImplementation libs.kotlin.reflect

    testImplementation libs.junit
    testImplementation libs.kotlin.coroutines.test
    testImplementation libs.mockito.kotlin
    testImplementation libs.turbine

    androidTestImplementation libs.kotlin.coroutines.test
    androidTestImplementation libs.androidx.junit.ext
    androidTestImplementation libs.androidx.espresso
    androidTestImplementation libs.androidx.core.testing
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.mockito.kotlin
    androidTestImplementation libs.mockito.android
    androidTestImplementation libs.turbine
    androidTestImplementation libs.compose.ui.test


}